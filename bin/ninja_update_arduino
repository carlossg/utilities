#!/bin/bash

script_name=`basename $0`

function printUsage {
	echo "Usage: "
	echo "  $script_name"
	echo "  $script_name <file.hex>"
	echo "    eg. $script_name arduino.hex"
	echo "  $script_name -f <version>"
	echo "    eg. $script_name -f V12"
}

function exitSuccess {
        exit 0
}
function exitFail {
        exit 1
}
function exitUsage {
	printUsage
	exitFail
}

official_update=false

# Define directories
# Setup the environment

if [ -f /etc/environment.local ]; then
    . /etc/environment.local
fi
code_dir=/opt/ninja
util_dir=/opt/utilities
tmp_dir=$util_dir/tmp
uri="http://s3.amazonaws.com/ninjablocks/code/${NINJA_CLIENT_NAME:-"beagle"}/arduino"
# Pull new code from repo
cd $tmp_dir
# Robustness hack
echo "[System] `date` Arduino Update Script Started (${NINJA_ENV:-"stable"})" >> /var/log/ninjablock.log
echo '{"DEVICE":[{"G":"0","V":0,"D":999,"DA":"FFFFFF"}]}' > /dev/ttyO1

sleep 2

function flashArduino {

	if [[ ! -e $1 ]]
	then
		echo "$1 does not exist"
		exitFail
	fi

	echo "[System] `date` Arduino Flashing Started" >> /var/log/ninjablock.log
	$util_dir/bin/setgpio;
	#sleep 1;
	$util_dir/bin/setserial;
	#sleep 1;
	if [ ! -d /sys/class/gpio/gpio38 ]; then
		echo "38" > /sys/class/gpio/export;
	fi
	#sleep 1;
	echo "out" > /sys/class/gpio/gpio38/direction;
	#sleep 1;
	for i in 1 2 3 4
	do
		echo "[System] `date` Flashing Arduino...Pass $i." >> /var/log/ninjablock.log;
		sudo echo "1" > /sys/class/gpio/gpio38/value;
		sleep 1;
		sudo echo "0" > /sys/class/gpio/gpio38/value;
		#sleep 1;
		#sudo echo "1" > /sys/class/gpio/gpio38/value;
		#sleep 1;
		
		avrdude -C $util_dir/etc/avrdude.conf  -p atmega328p -c arduino -P /dev/ttyO1 -b 57600 -D -U flash:w:$1:i;
		
		if [ "$?" = "0" ]; then
			sudo echo "1" > /sys/class/gpio/gpio38/value;
			echo "[System] `date` Successfully flashed Arduino in pass $i." >> /var/log/ninjablock.log;
			touch /etc/opt/ninja/.has_updated_arduino
			if $official_update ; then
				rm arduino.hex
			fi
			sync
			exitSuccess
		fi
		echo "[System] `date` Flashing Arduino...Pass $i Failed!"
	done
	echo "[System] `date` Critical error! Failed flashing Arduino in 3 passes." >> /var/log/ninjablock.log
}

if [[ $# -eq 1 ]]
then  
	if [[ $1 == -* ]] || [[ $1 == \? ]]; then
		exitUsage
	else #flash with filename given in params
		flashArduino $1
	fi
else 
	if [[ $# -ge 2 ]]
	then
		if [[ $1 != "-f" ]]
		then
			exitUsage
		else
			arduino_mv="$2_(unknown)" # force flash of unknown firmward version on specified board
		fi
	else
		# attempt to fetch the model
		arduino_mv=$(/opt/utilities/bin/fetch_arduino_version)
		
		if [ "$?" != "0" ]
		then
			echo "[System] `date` Arduino Update Failed. Could not retrieve version number." >> /var/log/ninjablock.log
			echo "Arduino Update Failed. Could not retrieve version number."
			echo "(Can force with:  $script_name -f V12 )"
			exitFail
		fi
	fi
	if [ -n "$arduino_mv" ] && [[ "$arduino_mv" == *_* ]] # if the response is not null, and is in the form model_version
	then
		# split the string by "_"
		arduino_model=$(echo $arduino_mv | awk '{split($0, arduino, "_") } END{print arduino[1]}')
		arduino_version=$(echo $arduino_mv | awk '{split($0, arduino, "_") } END{print arduino[2]}')
		echo "[System] `date` Arduino model: $arduino_model | version: $arduino_version will be updated." >> /var/log/ninjablock.log
		# include the model in the url to pull
		url="$uri/${arduino_model}/${NINJA_ENV:-"stable"}.hex"
		checksum="$uri/${arduino_model}/${NINJA_ENV:-"stable"}.checksum"
		# Do a lookup to ensure the file exists
		code=$(curl -s -o /dev/null -I -w "%{http_code}" $url)
		if [ "$code" != "200" ]
		then
			# fall back to stable
			# this is incase they have specified an environment with no arduino hex
			url="$uri/${arduino_model}/stable.hex"
			checksum="$uri/${arduino_model}/stable.checksum"
		fi
	else
		# Handle all the older arduino models not yet reporting version in new method
		echo "[System] `date` Arduino Update: falling back to V11 stable" >> /var/log/ninjablock.log
		url="$uri/V11/stable.hex"
		checksum="$uri/V11/stable.checksum"
	fi
	echo "[System] `date` Arduino Update Configured. Download starting." >> /var/log/ninjablock.log

	# Fetch the arduino hex
	# Do a lookup to ensure the file exists first
	code=$(curl -s -o /dev/null -I -w "%{http_code}" $url)
	if [ "$code" != "200" ]
	then
		echo "[System] `date` Arduino Update Failed. Could not fetch binary ($url)" >> /var/log/ninjablock.log
		echo "Arduino Update Failed. Could not fetch binary ($url)"
		exitFail
	fi
	curl --output arduino.hex $url
	# Fetch the remote checksum
	remote_checksum=$(curl $checksum | awk '{ print $1 }')
	# Calculate the local checksum
	local_checksum=$(sha1sum arduino.hex | awk '{ print $1 }')
	# If we have a file, have fetched the remote checksum, and it is the same as the local checksum
	if [ -e arduino.hex ] && [ -n "$remote_checksum" ] && [ "$remote_checksum" = "$local_checksum" ]
	then
		official_update=true
		flashArduino arduino.hex
	else
		echo "[System] `date` Could not retrieve valid arduino update binary." >> /var/log/ninjablock.log
	fi

	sync
fi
exitFail

